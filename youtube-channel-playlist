#!/usr/bin/env bash

# None of this works yet

# set -x

function print_usage() {
  cat <<EOF
$(basename "$0")
   VIDEO_ID
   [ --verbose | -v ]
   [ --help | -h ]

Given a video ID from the URL of a YouTube video, creates and
populates a playlist containing all the videos (up to 500) on that
channel.

EOF
}

while [[ "$1" != "" ]]; do
  case "$1" in
    "--verbose" | "-v")
      set -x
      ;;
    "--help" | "-h")
      print_usage
      exit 0
      ;;
    *)
      VIDEO_ID="$1"
      ;;
  esac
  shift
done

if [[ -z $VIDEO_ID ]]
then
  echo "Missing VIDEO_ID" > /dev/stderr
  echo
  print_usage
  exit 1
fi

YT_KEY=$(cat ~/.candera-youtube-api-key.asc | gpg -d --quiet)
YT_CLIENT_ID=$(cat ~/.candera-youtube-client-id.asc | gpg -d --quiet)
YT_CLIENT_SECRET=$(cat ~/.candera-youtube-client-secret.asc | gpg -d --quiet)
RESPONSE1=$(mktemp)

echo "Looking up video $VIDEO_ID"

curl \
  --silent \
  "https://youtube.googleapis.com/youtube/v3/videos?key=$YT_KEY&id=$VIDEO_ID&part=snippet" \
  --header 'Accept: application/json' \
  --compressed \
  > $RESPONSE1

CHANNEL_ID=$(cat $RESPONSE1 | jq -r '.items[0].snippet.channelId')

RESPONSE2=$(mktemp)

echo "Found on channel $CHANNEL_ID. Looking up channel details."
curl \
  --silent \
  "https://youtube.googleapis.com/youtube/v3/channels?key=$YT_KEY&id=$CHANNEL_ID&part=contentDetails&part=snippet" \
  --header 'Accept: application/json' \
  --compressed \
  > $RESPONSE2

UPLOADS_PLAYLIST=$(cat $RESPONSE2 | jq -r '.items[0].contentDetails.relatedPlaylists.uploads')
CHANNEL_NAME=$(cat $RESPONSE2 | jq -r '.items[0].snippet.title')

echo -n "Channel is $CHANNEL_NAME. Listing videos"

NEXT=start

FOUND_VIDEOS=$(mktemp)

while [[ -n $NEXT ]]
do
  if [[ "$NEXT" != "start" ]]
  then
    NEXT_PARAM="&pageToken=$NEXT"
  else
    NEXT_PARAM=""
  fi

  RESPONSE3=$(mktemp)

  curl \
    --silent \
    "https://youtube.googleapis.com/youtube/v3/playlistItems?key=$YT_KEY&playlistId=$UPLOADS_PLAYLIST&part=contentDetails&maxResults=50$NEXT_PARAM" \
    --header 'Accept: application/json' \
    --compressed \
    > $RESPONSE3

  cat $RESPONSE3 | jq -r '.items[].contentDetails | [ .videoPublishedAt, .videoId] | @tsv' >> $FOUND_VIDEOS

  NEXT=$(cat $RESPONSE3 | jq -r '.nextPageToken')

  if [[ $NEXT == "null" ]]
  then
    NEXT=
  fi

  echo -n "."
  
done

echo

VIDEO_COUNT=$(cat $FOUND_VIDEOS | wc -l)

if [[ $VIDEO_COUNT -eq 0 ]]
then
  echo "Nothing to do. Exiting."
  exit 1
fi

echo "Found $VIDEO_COUNT videos."

FOUNDDIR=$(mktemp -d)

cd $FOUNDDIR

cat $FOUND_VIDEOS | sort -k 1 | cut -f 2 > found

# split -l 50 found

# rm found

# for FILE in $(ls)
# do
#   echo "https://www.youtube.com/watch_videos?video_ids=$(cat $FILE | paste -s -d ',' -)"
# done


PLAYLIST_NAME="$CHANNEL_NAME All $(date +%Y-%m-%d" "%H:%M)"

echo "Creating playlist $PLAYLIST_NAME."

TOKEN_FILE=$(mktemp -d)/token

echo "Awaiting token in $TOKEN_FILE"

$(dirname $0)/listen 9004 $TOKEN_FILE

open "https://accounts.google.com/o/oauth2/v2/auth?scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fyoutube&response_type=code&state=security_token%3D138r5719ru3e1%26url%3Dhttps%3A%2F%2Foauth2.example.com%2Ftoken&redirect_uri=http%3A//127.0.0.1%3A9004&client_id=$YT_CLIENT_ID"

echo "Waiting for authentication"
while [[ ! -f $TOKEN_FILE ]]
do
  echo -n "."
  sleep 1
done
echo

TOKEN_RESPONSE=$(mktemp)

curl -X POST \
     --silent \
     https://oauth2.googleapis.com/token \
     --data code=$(cat $TOKEN_FILE) \
     --data client_id=$YT_CLIENT_ID \
     --data client_secret=$YT_CLIENT_SECRET \
     --data redirect_uri=http://127.0.0.1:9004 \
     --data grant_type=authorization_code \
     > $TOKEN_RESPONSE

ACCESS_TOKEN=$(cat $TOKEN_RESPONSE | jq -r .access_token)

echo "Creating playlist $PLAYLIST_NAME"

CREATE_PLAYLIST_RESPONSE=$(mktemp)

curl \
  --silent \
  -X POST \
  "https://www.googleapis.com/youtube/v3/playlists?part=snippet" \
  --header 'Content-Type: application/json' \
  --header "Authorization: Bearer $ACCESS_TOKEN" \
  --data-binary @- <<EOF > $CREATE_PLAYLIST_RESPONSE
{
   "snippet":
   {"title": "$PLAYLIST_NAME"}
}
EOF

PLAYLIST_ID=$(jq -r .id $CREATE_PLAYLIST_RESPONSE)

echo "Adding videos to playlist $PLAYLIST_ID"

CREATE_ITEM_RESPONSE=$(mktemp)

for VIDEO in $(cat $FOUNDDIR/found)
do
  echo "Adding $VIDEO"
  
  curl \
    --include \
    --silent \
    -X POST \
    "https://www.googleapis.com/youtube/v3/playlistItems?part=snippet" \
    --header 'Content-Type: application/json' \
    --header "Authorization: Bearer $ACCESS_TOKEN" \
    --data-binary @- <<EOF > $CREATE_ITEM_RESPONSE
{
   "snippet":
   {"playlistId": "$PLAYLIST_ID",
    "resourceId": {
      "kind": "youtube#video",
      "videoId": "$VIDEO"
     }
   }
}
EOF

  if ! cat $CREATE_ITEM_RESPONSE | head -1 | grep 200
  then
    echo "Failed"
    echo
    cat $CREATE_ITEM_RESPONSE
    exit 1
  fi

  echo -n "."
done

open https://youtube.com/watch?list=$PLAYLIST_ID
